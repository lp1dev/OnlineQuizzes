"Which of the following files in /usr/src/linux/Documentation provides guidelines specifically for writing and configuring loadable kernel modules?",multiple-choice,"Documentation/kbuild/modules.txt","Documentation/kbuild/modules.txt contains detailed instructions on how to write, build, and configure kernel modules using the kbuild system.","Documentation/devicetree/bindings/bind.txt","Documentation/devicetree/bindings/bind.txt describes Device Tree binding syntax and is unrelated to kernel modules.","Documentation/power/power_states.txt","Documentation/power/power_states.txt covers system power states (suspend, hibernate) and has no module API details.","Documentation/filesystems/ext4.txt","Documentation/filesystems/ext4.txt describes the ext4 filesystem; it does not discuss general kernel module development.",,,,,"1","The file Documentation/kbuild/modules.txt in the kernel source tree is the official reference for developers on how to implement, build, and configure loadable kernel modules under the kbuild system.","Topic 201.1 Linux Kernel components"
"After successfully compiling a custom Linux kernel, which of the following steps should you perform to make the new kernel bootable (select all that apply)?",multi-select,"make bzImage","This target builds the compressed kernel image (bzImage) for installation under /boot.","make modules_install","This target installs all compiled kernel modules into /lib/modules/<new-version>.","mkinitramfs -o /boot/initrd.img-<new-version> <new-version>","This command generates an initial ramdisk image under /boot for the new kernel.","make mrproper","This target cleans the source tree completely (including .config), which is not required for making the kernel bootable and would remove your configuration.",,,,,"1,2,3","Once you have configured and compiled the kernel, you must install the kernel image (make bzImage) so it’s available under /boot, install the modules (make modules_install) so they reside in /lib/modules/<new-version>, and generate an initramfs or initrd (mkinitramfs or mkinitrd) so the kernel can load essential modules at boot. The make mrproper target is used for cleaning the source tree and would remove your .config, so it is not part of the boot preparation steps.","201.2 Compiling a Linux kernel"
"After running depmod for a newly compiled kernel, which files are typically generated under /lib/modules/$(uname -r)/?",multi-select,"modules.dep","modules.dep contains the dependency list for all modules.","modules.alias","modules.alias maps module alias names to real module filenames.","modules.softdep","modules.softdep lists soft dependencies between modules.","modules.symbols","modules.symbols indexes exported symbol names and which module provides them.","modules.cache","modules.cache is not a standard output file created by depmod.",,,,"1,2,3,4","When you run depmod against a kernel tree, it scans all installed modules under /lib/modules/$(uname -r)/ and generates several files that the kernel and module loader use: modules.dep, modules.alias, modules.softdep, modules.symbols (among others such as modules.devname, modules.order, and modules.builtin). There is no modules.cache file created by default.","201.2 Compiling a Linux kernel"
"Once you have configured the Linux kernel source in /usr/src/linux for an x86 system, which make target will produce the bootable compressed kernel image?",multiple-choice,"make zImage","make zImage builds a 16-bit compressed kernel image used on some older or embedded architectures, not the standard 32/64-bit PC boot image.","make bzImage","make bzImage builds the 32/64-bit bootable kernel image for x86 platforms, placing it in arch/x86/boot/bzImage.","make modules","make modules compiles only the kernel modules (.ko files); it does not produce a bootable kernel image.","make install","make install copies the built kernel and associated files to /boot and updates bootloader entries, but it does not itself compile the image.",,,,,"2","On x86 and x86_64 platforms, the standard bootable image is built with the bzImage target. This creates the compressed kernel in arch/x86/boot/bzImage, which you then install (typically using make install) for your bootloader to load.","201.1 Kernel components"
"Which make target should you run in the Linux kernel source tree to remove all generated files, kernel configuration, and backup files, returning the source to a pristine state?",multiple-choice,"make clean","make clean only removes most object files and temporary files, but retains the .config and other generated metadata.","make mrproper","make mrproper removes everything generated in previous builds, including object files, .config, backup files, and editor temporary files.","make modules","make modules only compiles kernel modules; it does not remove any files.","make modules_install","make modules_install installs compiled modules into /lib/modules/; it does not perform any cleaning.",,,,,"2","The make mrproper target performs a deep clean of the kernel source tree, deleting all build artifacts, the .config file, and backup or temporary files, effectively restoring the tree to its freshly unpacked state.","201.2 Compiling a Linux kernel"
"Which of the following statements correctly describe bzImage in the context of building and booting the Linux kernel?",multi-select,"bzImage is a compressed kernel image that supports sizes larger than 512 KB","Correct. The original zImage format is limited to around 512 KB; bzImage was introduced to allow much larger kernels.","bzImage is loaded at high memory above the first megabyte (1 MB)","Correct. bzImage places its decompression stub and payload above the 1 MB boundary to avoid real-mode memory constraints.","bzImage uses the xz compression format by default","Incorrect. By default, bzImage uses gzip compression; xz or other formats can be selected but are not the default.","bzImage stands for “big zImage” and employs a small stub loader to copy the kernel to high memory before decompression","Correct. The name literally means “big zImage,” and it uses a small real-mode loader (stub) to move itself to high memory before unpacking.",,,,,"1,2,4","bzImage was designed to overcome the size limits of the original zImage by relocating the decompression stub and payload above 1 MB. It retains gzip compression by default (though other compressors like xz can be configured) and uses a tiny real-mode loader to copy the kernel into high memory before decompression, hence the term “big zImage.”","Topic 201: Linux Kernel"
"Which of the following methods/tools can you use to monitor the number of processes waiting for CPU time, in order to predict when the CPU will become a bottleneck?",multi-select,"Use sar -q to monitor the run queue length","sar -q reports the average run queue length, which tells you how many processes are waiting for CPU.","Use vmstat and observe the 'r' column (processes waiting)","vmstat’s 'r' column shows the number of processes waiting for run time on the CPU.","Use top to monitor the DISK I/O wait time","top can show CPU usage and I/O wait but it does not directly report the run queue length metric needed for CPU saturation prediction.","Use df -h to monitor CPU utilization","df -h reports filesystem disk usage, not CPU metrics.",,,,,"1,2","To predict when the CPU will be saturated, you monitor the run queue length—the number of processes waiting to run. sar -q provides a historical view of the run queue, and vmstat’s 'r' column shows the instantaneous run queue length. Neither df nor top’s disk I/O wait metric directly measures how many processes are waiting for CPU time.","200.2 Predict Future Resource Needs"
"Your /var filesystem is 50 GB in size. Historical data shows it currently holds 30 GB and has been growing linearly at about 2 GB per week. Using this trend, how many weeks from now will /var run out of space?",multiple-choice,"5 weeks","5 weeks – Incorrect. At 2 GB per week, 5 weeks would add only 10 GB, reaching 40 GB, not full capacity.","10 weeks","10 weeks – Correct. With 30 GB used and 20 GB free, growing at 2 GB/week, 20 GB ÷ 2 GB/week = 10 weeks.","12.5 weeks","12.5 weeks – Incorrect. That would correspond to 25 GB growth, overshooting the free 20 GB capacity.","20 weeks","20 weeks – Incorrect. 20 weeks at 2 GB/week = 40 GB growth, which is far beyond the 20 GB free.",,,,,"2","To predict a capacity break point, determine the remaining free space (50 GB total – 30 GB used = 20 GB) and divide by the observed growth rate (2 GB/week). 20 GB / 2 GB per week = 10 weeks until exhaustion.","200.2 Predict Future Resource Needs"
"A Linux system exhibits a high load average while “top” shows low CPU utilization across all cores. Which of the following is the most likely cause?",multiple-choice,"A large number of CPU-bound processes consuming all CPU cycles","If CPU-bound processes were consuming CPU, top would show high CPU utilization.","A large number of processes waiting for I/O","Processes waiting on I/O remain in uninterruptible sleep, contributing to load average without using CPU.","Many zombie (defunct) processes","Zombie processes do not contribute to load average once they have completed execution.","High network bandwidth saturation","Network saturation affects throughput but does not directly increase the system load average.",,,,,"2","Load average measures the number of processes in runnable or uninterruptible sleep states. When processes wait for disk or other I/O, they enter uninterruptible sleep (D state), raising load average even though the CPU remains idle. This discrepancy between load average and CPU utilization is a strong indicator of an I/O bottleneck.","Topic 200: Capacity Planning"
"What is the primary purpose of the /lib/modules/$(uname -r)/ directory on a Linux system?",multiple-choice,"It contains the kernel source code used for recompilation.","The kernel source code resides under /usr/src/linux, not under /lib/modules.","It holds the compiled kernel modules and their dependency metadata for the running kernel version.","Correct. /lib/modules/$(uname -r)/ contains the .ko module files, module dependency lists, and related configuration for that specific kernel version.","It stores the initramfs images and bootloader configuration files.","Initramfs images are usually under /boot and bootloader configs under /boot/grub or /etc, not in /lib/modules.","It includes user-space libraries needed by kernel utilities.","User-space libraries for kernel utilities are found under /lib or /usr/lib, not in the module directory.",,,,,"2","When you compile and install a new kernel, its modules (.ko files) and the generated dependency files (modules.dep, map files, etc.) are placed under /lib/modules/<kernel-version>/. The depmod utility scans this directory to build the dependency database used by modprobe and other module management tools.","201.2 Compiling a Linux kernel"
"Which of the following methods can you use to verify the currently loaded kernel modules on a running Linux system?",multi-select,"Use the lsmod command","lsmod reads /proc/modules and displays the list of loaded modules.","Run modprobe --list","modprobe --list lists available modules on disk, not those currently loaded.","Inspect /proc/modules","/proc/modules is a virtual file containing the names and usage counts of loaded modules.","Execute insmod with --list","insmod is used to insert modules into the kernel, it does not list loaded modules.","Check the output of dmesg for module information","dmesg may show some module load messages, but it is not a reliable or complete list of loaded modules.",,,,"1,3","To determine which modules are currently loaded, the lsmod utility provides a convenient tabular view by reading /proc/modules directly, and you can also inspect /proc/modules yourself to see module names, sizes, and usage counts. Other commands like modprobe --list show modules available on disk rather than those actually in use, while insmod only inserts modules, and dmesg is for kernel messages and not a definitive module list.","Topic 201.1 Kernel components"
"Which file in /usr/src/linux/Documentation/ should you consult for the official Linux kernel coding style guidelines?",multiple-choice,"MAINTAINERS","MAINTAINERS lists subsystem maintainers and their contact information.","COPYING","COPYING contains the kernel’s license text (GPL).","CodingStyle","CodingStyle documents the preferred source code conventions and style rules.","Kconfig","Kconfig defines kernel configuration options, not coding style.",,,,,"3","The file Documentation/CodingStyle in the kernel source tree is the authoritative reference for kernel code formatting, naming conventions, comment style, and other development guidelines.","Topic 201: Linux Kernel"
"Which of the following commands can be used to monitor disk I/O activity in real time on a Linux system?",multi-select,"iostat","iostat reports CPU and I/O statistics for devices and partitions.","iotop","iotop shows per-process disk I/O usage in real time, similar to top for CPU.","netstat","netstat is used for network connections, routing tables, and interface statistics, not disk I/O.","vmstat","vmstat displays information about processes, memory, paging, block I/O, traps, and CPU activity.",,,,,"1,2,4","To monitor disk I/O you can use iostat (for device-level I/O stats), iotop (for per-process I/O), and vmstat (which includes blocks in/out under its I/O columns). netstat, on the other hand, is focused on network statistics and does not provide disk I/O information.","Topic 200: Capacity Planning"
"After installing new kernel modules with “make modules_install”, which command should you run to regenerate the dependency files under /lib/modules/$(uname -r)/?",multiple-choice,"modprobe","modprobe loads modules by name but does not regenerate the dependency database.","depmod","depmod scans the modules directory and creates Modules.dep and related files under /lib/modules/kernel-version/.","modinfo","modinfo displays information about a kernel module but does not affect dependency files.","insmod","insmod inserts a module into the running kernel but does not rebuild module dependency lists.",,,,,"2","When you install or upgrade modules with “make modules_install”, you must run depmod so that it scans /lib/modules/$(uname -r)/ and rebuilds the Modules.dep and map files. This allows tools like modprobe to resolve dependencies correctly.","201.2 Compiling a Linux kernel"
"You need to monitor the number of blocks received from and sent to block devices on a Linux system in real time. Which vmstat columns correspond to blocks in and blocks out?",multi-select,"bi","‘bi’ shows the number of blocks received from a block device (blocks in).","bo","‘bo’ shows the number of blocks sent to a block device (blocks out).","wa","‘wa’ shows the percentage of CPU time spent waiting for I/O operations to complete, not raw block counts.","id","‘id’ shows the percentage of idle CPU time, unrelated to block I/O counts.",,,,,"1,2","In vmstat output, the ‘bi’ column indicates blocks received from a block device (blocks in), and the ‘bo’ column indicates blocks sent to a block device (blocks out). These are the primary metrics for tracking disk I/O rates in terms of block transfers. Columns like ‘wa’ (I/O wait) and ‘id’ (CPU idle) provide different insights and not actual block counts.","Topic 200: Capacity Planning"
Question,Question Type,Answer Option 1,Explanation 1,Answer Option 2,Explanation 2,Answer Option 3,Explanation 3,Answer Option 4,Explanation 4,Answer Option 5,Explanation 5,Answer Option 6,Explanation 6,Correct Answers,Overall Explanation,Domain
"After building a custom Linux kernel (e.g., using make bzImage and make modules), which of the following steps are required to install the kernel and make it available at next boot? (Select three)",multi-select,"make modules_install","Installs the compiled kernel modules into /lib/modules/<kernel-version> so that they can be loaded at runtime.","make install","Copies the new kernel image, System.map, and config into /boot and updates bootloader entries (on some distributions this is combined with update-grub).","mkinitramfs -o /boot/initramfs-<kernel-version>.img <kernel-version>","Generates an initial RAM filesystem image (initramfs) for the new kernel so that necessary modules (e.g., storage, filesystem) are available at early boot.","update-grub","Re-scans /boot and regenerates the GRUB configuration file so that the new kernel appears in the menu for next boot.","depmod -a","Rebuilds the module dependency database; often done automatically by modules_install, but explicit use can be necessary if modules are manually moved.",,,,"1,3,4","To install a newly compiled kernel you must install its modules (make modules_install), generate an initramfs/initramfs image for early userspace (e.g., via mkinitramfs or dracut), and update the bootloader configuration (update-grub) so the new kernel is selectable at boot. While make install on some distributions also copies files into /boot, many modern setups separate module installation and initramfs creation from bootloader configuration. depmod -a is implicitly run by modules_install, so it’s not strictly required as a separate step here.","201.2 Compiling a Linux kernel"
"Which option when used with the iostat command enables extended device utilization metrics such as await, svctm, and %util?",multiple-choice,"-d","-d displays basic device statistics (tps, kB_read/s, kB_wrtn/s) but not the extended metrics.","-k","-k outputs statistics in kilobytes instead of the default blocks; it does not enable extended metrics.","-x","-x enables extended metrics including await (average wait time), svctm (average service time) and %util (device utilization).","-m","-m is not a valid iostat option.",,,,,"3","The -x flag in iostat switches on extended statistics, providing detailed per‐device metrics such as 'await', 'svctm', and '%util', which are crucial for diagnosing disk I/O bottlenecks.","Capacity Planning 200.1"
"On a modern Linux distribution that uses the dracut framework, which command would you use to generate or update the initial ramdisk image for a newly installed kernel?",multiple-choice,"mkinitrd","mkinitrd is the older tool for creating initrd images on distributions that do not use dracut.","dracut","dracut is the tool designed to generate or update initramfs images on systems using the dracut framework.","mkinitramfs","mkinitramfs is Debian’s wrapper around update-initramfs and is not used on dracut-based systems.","update-initramfs","update-initramfs is Debian/Ubuntu’s native command for managing initramfs, not dracut.","genkernel","genkernel is a Gentoo utility for building kernels and initramfs but is not the standard dracut tool.",,,,"2","On distributions that have adopted dracut (such as Fedora, RHEL, and many others), you use the 'dracut' command to create or update the initramfs image after installing or upgrading a kernel. Other tools like mkinitrd or update-initramfs are specific to older or different distribution initrd frameworks and are not used when dracut is in place.","201.2 Compiling a Linux kernel"
"Within the /usr/src/linux kernel source tree, which command sequence will produce a .config file based on the running kernel's configuration and then update it interactively?",multiple-choice,"cp /boot/config-$(uname -r) .config && make oldconfig","This copies the current kernel's config into .config and then runs the oldconfig target interactively to update it.","make defconfig","make defconfig generates a default configuration, not one based on the running kernel.","make menuconfig","make menuconfig requires an existing .config; it provides an ncurses interface but won't initialize from the current kernel config alone.","make config","make config also requires a .config; it presents a line-by-line prompt rather than initializing from the running kernel.",,,,,"1","By copying /boot/config-$(uname -r) into .config and then invoking 'make oldconfig', you ensure the source tree starts with your current kernel's settings and then interactively prompt for any new or changed options.","Topic 201: Linux Kernel"
"Which of the following statements about systemd-boot and U-Boot are correct?",multi-select,"systemd-boot is a UEFI-only boot manager that reads configuration entries from the EFI system partition under loader/entries.","True: systemd-boot is designed for UEFI systems and looks for .conf files in the /loader/entries directory on the EFI System Partition.","systemd-boot relies on extlinux.cfg for its configuration.","False: systemd-boot does not use extlinux.cfg; it uses simple .conf files in loader/entries.","U-Boot can be used on embedded platforms to load Linux kernels over the network using TFTP.","True: U-Boot is common on embedded boards and supports network booting (e.g., via TFTP) to fetch kernels and device trees.","U-Boot stores its environment variables exclusively in a kernel command-line file.","False: U-Boot environment variables are stored in a dedicated flash or partition area and managed via fw_printenv/fw_setenv, not in the kernel command line.",,,,,"1,3","systemd-boot is an EFI-only loader that reads its simple configuration from the ESP's loader/entries directory, not from extlinux.cfg. U-Boot is a versatile bootloader for embedded systems that can perform network boots (TFTP) and stores its environment in a flash or partition area, modifiable via fw_printenv/fw_setenv.","202.3 Alternate Bootloaders"
"Which of the following statements about systemd-boot and U-Boot are correct?",multi-select,"systemd-boot’s configuration is located in /boot/loader/loader.conf and entry files in /boot/loader/entries/","True. systemd-boot looks for loader.conf in /boot/loader and entry snippets in /boot/loader/entries.","U-Boot stores its environment variables in an embedded storage area (e.g., flash memory)","True. U-Boot maintains its environment (bootargs, bootcmd, etc.) in a reserved region of flash or in a special file on a filesystem.","systemd-boot natively supports legacy BIOS booting on x86 systems","False. systemd-boot requires UEFI firmware and cannot boot in legacy BIOS mode.","U-Boot’s primary stage is always loaded from the MBR of a disk","False. U-Boot’s primary stage is often stored in a dedicated flash area or SPI chip, not necessarily in an MBR.","systemd-boot can chain-load BIOS boot loaders","False. systemd-boot runs as an EFI application and cannot chain-load BIOS boot loaders.",,,,"1,2","systemd-boot is a UEFI-only boot manager that reads loader.conf from /boot/loader and individual .conf files from /boot/loader/entries. U-Boot is a common embedded bootloader that maintains a set of environment variables in a reserved flash partition (or file). Unlike BIOS loaders, systemd-boot does not support legacy BIOS, and U-Boot does not rely on the disk’s MBR for its first stage.","202.3 Alternate Bootloaders"
"Which of the following directories are used by systemd to discover and store unit files for system services?",multi-select,"/usr/lib/systemd/system","This is the primary vendor-supplied location for system unit files.","/etc/systemd/system","This directory holds administrator-managed overrides and custom units.","/run/systemd/system","Transient or runtime-generated units are stored here.","/etc/init.d","This directory is used for SysV init scripts, not systemd unit files.",,,,,"1,2,3","systemd loads unit definitions from a hierarchy of directories. Vendor-supplied units reside in /usr/lib/systemd/system, administrator overrides and custom units in /etc/systemd/system, and runtime or transient units in /run/systemd/system. The /etc/init.d directory is part of the traditional SysV init system and is not used by systemd to store native unit files.","Topic 202: System Startup"
"In a SYSLINUX-generated hybrid ISO image, what is the primary role of the isohdpfx.bin file?",multiple-choice,"It acts as the El Torito boot catalog file.","The El Torito boot catalog is a separate structure on the ISO and is not stored in isohdpfx.bin.","It contains an HFS+ partition for Mac OS boot support.","isohdpfx.bin is not related to HFS+ or Mac OS support.","It provides the BIOS boot sector and protective MBR for CD-ROM BIOS booting.","Correct. isohdpfx.bin is a small floppy-image containing the MBR and BIOS boot sector used for El Torito BIOS emulation on hybrid ISOs.","It includes the UEFI-compatible FAT32 EFI system partition image.","The UEFI system partition image is provided by efiboot.img, not isohdpfx.bin.",,,,,"3","When creating a hybrid ISO with SYSLINUX, isohdpfx.bin supplies a floppy-style BIOS boot image (including a protective MBR) so that BIOS-based systems can boot the CD/DVD via the El Torito floppy emulation mode.","202.3 Alternate Bootloaders"
"You need to make a removable USB stick (/dev/sdc) bootable under a BIOS-based system using GRUB2. Which target should you pass to grub-install to ensure GRUB is installed into the device’s MBR rather than onto a partition?",multiple-choice,"/dev/sdc","Installs GRUB2 into the Master Boot Record of the entire device (correct for BIOS boot)","/dev/sdc1","Installs GRUB2 into the Partition Boot Record of partition 1, requiring a chainloader in the MBR","/dev/sdc1p1","Invalid path – Linux doesn’t create device nodes like /dev/sdc1p1","/mnt/usb","This is a mount point, not a block device; grub-install requires a device node",,,,,"1","On BIOS-based systems you specify the whole block device (e.g. /dev/sdc) to grub-install so that GRUB’s bootloader (MBR code and core image) is written to the Master Boot Record area. Specifying /dev/sdc1 would only write into the partition’s boot sector, which won’t be loaded directly by the BIOS without a prior MBR chainloader.","202.2 System recovery"
"Which systemctl command prevents a service from being started, even if other units depend on it?",multiple-choice,"systemctl stop httpd.service","Stops the service immediately but does not prevent it from being started again, either manually or as a dependency.","systemctl disable httpd.service","Disables automatic startup at boot time by removing symlinks, but dependencies can still trigger the service.","systemctl mask httpd.service","Masks the service by symlinking its unit file to /dev/null, blocking any activation, manual or dependency-based.","systemctl inhibit httpd.service","No such 'inhibit' subcommand exists in systemctl for preventing service activation.",,,,,"3","Masking a unit with 'systemctl mask' links its definition to /dev/null, making it impossible for systemd to start it under any circumstances—even if another unit specifies it as a dependency. Disabling only removes startup symlinks for boot targets, and stopping only halts the current instance.","Topic 202: System Startup"
"Which file lists the dependencies between kernel modules for the current kernel version?",multiple-choice,"/lib/modules/$(uname -r)/modules.dep","Correct: modules.dep is generated by depmod and holds the dependency list for all modules of the running kernel.","/etc/modules.conf","/etc/modules.conf (or /etc/modprobe.d/) is used to set module aliases and options, not to track dependencies.","/proc/modules","/proc/modules shows which modules are currently loaded, their sizes, and reference counts, but not their on-disk dependencies.","/usr/lib/modules/modules.dep","/usr/lib/modules/.../modules.dep is not the standard location; most distributions use /lib/modules/$(uname -r)/modules.dep.",,,,,"1","The depmod utility scans /lib/modules/$(uname -r) and writes the modules.dep file, which maps each module to the modules it depends on. Modprobe uses this information to load dependencies automatically.","201.3 Kernel runtime management and troubleshooting"
"Which of the following statements correctly describe systemd-boot?",multi-select,"It requires UEFI firmware and loads EFI executables from the EFI system partition","True: systemd-boot is an EFI-only loader that loads EFI binaries from the ESP.","It stores its configuration in /boot/loader/entries/*.conf files","True: by default, systemd-boot reads one .conf file per entry under /boot/loader/entries.","It supports scripting and environment variables similar to U-Boot","False: scripting and U-Boot-style environment variables are features of U-Boot, not systemd-boot.","It can be used as a BIOS bootloader on MBR-based systems","False: systemd-boot only works with UEFI; it has no legacy BIOS/MBR mode.",,,,,"1,2","systemd-boot is a lightweight UEFI boot manager provided by systemd that requires an EFI system partition. It reads simple .conf files under /boot/loader/entries to define boot entries. Unlike U-Boot, it has no support for scripting or legacy BIOS boot.","202.3 Alternate Bootloaders"
"Which of the following statements accurately describe systemd-boot?",multi-select,"It supports booting on legacy BIOS systems without UEFI.","Incorrect. systemd-boot is a UEFI-only boot manager and does not support legacy BIOS booting.","It can directly load Linux kernel images using the EFI stub.","Correct. systemd-boot leverages the EFI stub in the kernel to load and start images directly.","Its configuration files are located in /boot/loader/entries/ and /boot/loader/loader.conf.","Correct. Entries live under /boot/loader/entries/ and global settings under /boot/loader/loader.conf.","It relies on environment variables like 'bootcmd' and 'bootargs' for boot configuration.","Incorrect. Relying on 'bootcmd' and 'bootargs' is behavior typical of U-Boot, not systemd-boot.",,,,,"2,3","systemd-boot is a simple UEFI boot manager maintained by the systemd project. It only runs under UEFI, uses the kernel’s EFI stub interface to load kernels directly, and stores its configuration in the EFI system partition under /boot/loader (global loader.conf plus per-entry files in loader/entries). It does not use or honor U-Boot-style environment variables such as bootcmd or bootargs.","202.3 Alternate Bootloaders"
"Which command should you run to rebuild the module dependency database (modules.dep) after adding or removing kernel modules under /lib/modules/$(uname -r)?",multiple-choice,"/sbin/depmod","depmod scans /lib/modules/$(uname -r) and rebuilds modules.dep and map files needed by modprobe.","/sbin/modprobe","modprobe loads or removes modules based on modules.dep but does not regenerate the dependency database.","/sbin/insmod","insmod inserts a module into the running kernel from a given .ko file without updating any dependency files.","/sbin/modinfo","modinfo displays information about a given kernel module; it does not alter dependencies.","/sbin/rmmod","rmmod removes a module from the running kernel; it does not rebuild the dependency database.",,,,"1","When you install or remove kernel modules under /lib/modules/$(uname -r), you must run /sbin/depmod to rescan all available modules and regenerate the modules.dep (and related) files. This database is used by tools like modprobe to resolve module dependencies automatically.","201.3 Kernel runtime management and troubleshooting"
"Which of the following statements about systemd-boot and U-Boot are correct?",multi-select,"systemd-boot requires UEFI firmware and cannot be used on legacy BIOS systems.","True: systemd-boot is designed exclusively for UEFI-based machines and does not support BIOS/legacy boot.","systemd-boot configuration files are stored under /boot/loader/entries with a .conf extension.","True: systemd-boot loads its menu entries from individual .conf files placed in /boot/loader/entries on the EFI system partition.","U-Boot cannot perform network boot operations and only supports local storage devices.","False: U-Boot supports network boots (DHCP, TFTP, PXE-like workflows) in addition to local storage.","U-Boot uses the 'env' command to modify its environment variables stored in non-volatile memory.","True: U-Boot’s 'env' command (and related tools) is used to view and modify its persistent environment variables.",,,,,"1,2,4","systemd-boot is a simple UEFI-only loader that reads a loader.conf and individual .conf entry files from the EFI system partition (typically /boot/loader/entries). It cannot be used on legacy BIOS systems. U-Boot is a versatile firmware loader often used on embedded and ARM platforms; it can boot from local or network sources and provides an 'env' command to manage its persistent environment variables stored in flash or other non-volatile storage.","202.3 Alternate Bootloaders (weight: 2)"
"Which utility should you use to display the parameters accepted by a specific kernel module and their default values?",multiple-choice,"modinfo","modinfo prints detailed information about a module, including its parameters and default values.","lsmod","lsmod only lists currently loaded modules and their usage counts; it does not show module parameters.","dmesg","dmesg shows kernel ring buffer messages (e.g., boot and runtime logs) but does not list module parameters.","modprobe","modprobe is used to load or remove modules and to manage aliases, but it does not display parameter details.",,,,,"1","The modinfo utility reads the module's .ko file metadata and prints out various details, including the list of parameters the module accepts along with their default values. This is the standard tool for querying module information without loading or unloading the module.","201.3 Kernel runtime management and troubleshooting"
"Which command provides detailed information, including available parameters, for the ext4 filesystem kernel module on a typical Linux system?",multiple-choice,"modinfo ext4","modinfo displays metadata for a kernel module—including its parameters, license, author, and description.","lsmod ext4","lsmod only lists currently loaded modules and their memory usage; it does not show parameters.","modprobe -l ext4","modprobe -l lists module file names available in /lib/modules but does not show module metadata or parameters.","depmod ext4","depmod builds a dependency list for modules; it does not display module metadata or parameters.",,,,,"1","The modinfo command reads the module’s .ko file under /lib/modules/$(uname -r)/ and prints detailed information, including the parameters that can be set when loading the module.","201.3 Kernel runtime management and troubleshooting"
"Which of the following files is the GRUB2 EFI executable for x86_64 UEFI systems, typically placed in the EFI System Partition?",multiple-choice,"grubx64.efi","Correct: grubx64.efi is the 64-bit GRUB2 EFI binary loaded by UEFI firmware on x86_64 systems.","grubia32.efi","Incorrect: grubia32.efi is the 32-bit GRUB2 EFI binary for legacy IA-32 UEFI systems.","shimx64.efi","Incorrect: shimx64.efi is a signed preloader that launches grubx64.efi, not the core GRUB2 binary itself.","pxelinux.0","Incorrect: pxelinux.0 is a PXE (network) bootloader for BIOS systems, not an EFI binary.",,,,,"1","On x86_64 UEFI platforms, the GRUB2 binary must be named grubx64.efi and placed in the EFI System Partition (for example under /EFI/grub/). The UEFI firmware loads this 64-bit executable to begin the boot process. Other files like grubia32.efi target 32-bit UEFI, shimx64.efi is a signed stub, and pxelinux.0 is for BIOS PXE booting.","202.3 Alternate Bootloaders"
"You need to boot a broken system into the most minimal environment possible—only the root filesystem (read-only) is mounted and you are dropped into a shell before any other services or filesystems are brought up. Which systemd target provides exactly this?",multiple-choice,"rescue.target","rescue.target: Single-user mode with most services available, useful for general recovery tasks but still mounts filesystems.","emergency.target","emergency.target: The absolute minimum environment—only the root fs (read-only) and a shell before any other units are started.","sysinit.target","sysinit.target: Early boot target that initializes basic hardware and filesystems, not for an interactive shell.","graphical.target","graphical.target: Full multi-user with graphical interface, not a recovery or minimal mode.",,,,,"2","The emergency.target is intended for the most minimal recovery environment: it mounts only the root filesystem (read-only) and drops you into a shell before any other services or mounts are activated, allowing you to run fsck or repair tasks without interference.","202.2 System recovery"
"Regarding systemd-boot and U-Boot, which of the following statements are correct?",multi-select,"systemd-boot reads configuration files from /boot/loader/entries and uses EFI variables to manage boot entries","True. systemd-boot is a UEFI boot manager that loads .conf entries from /boot/loader/entries and manipulates EFI variables for its boot menu.","U-Boot can store its environment variables in persistent storage such as NOR flash or MMC","True. U-Boot’s environment can be saved in flash, EEPROM, MMC or other persistent storage, allowing parameter preservation across reboots.","systemd-boot is compatible with BIOS systems and installs to the MBR","False. systemd-boot only works on UEFI-enabled systems and does not support legacy BIOS or MBR installation.","U-Boot can only load images from local disk and lacks network boot capabilities","False. U-Boot includes built-in network drivers and can fetch boot images over protocols like TFTP, DHCP, and NFS.",,,,,"1,2","systemd-boot is a simple UEFI-only boot manager that relies on EFI variables and configuration drop-ins under /boot/loader. U-Boot is a flexible primary bootloader used in embedded systems; it maintains environment settings in various persistent backends and supports network boot via TFTP, DHCP, etc.","202.3 Alternate Bootloaders"
"You need to boot a Linux system managed by systemd directly into emergency mode for recovery. At the GRUB2 boot prompt, which kernel parameter should you append to the linux line?",multiple-choice,"systemd.unit=emergency.target","Specifies the systemd target to enter emergency mode.","single","Starts in single-user mode under SysV init, not pure systemd emergency mode.","init=/bin/bash","Replaces the init process with a shell, but does not start systemd emergency target.","systemd.unit=rescue.target","Specifies the systemd target to enter rescue mode, which is less minimal than emergency mode.",,,,,"1","Under systemd, appending 'systemd.unit=emergency.target' to the kernel command line directs the init process to load only the emergency.target unit, giving you the most minimal environment for recovery. 'single' invokes legacy single-user mode, 'init=/bin/bash' bypasses systemd entirely, and 'systemd.unit=rescue.target' drops to rescue mode, which still starts more services than emergency mode.","202.2 System recovery"
"You need to troubleshoot hardware detection issues by observing real-time udev events as devices are added or removed. Which of the following tools can you use?",multi-select,"udevadm monitor","udevadm monitor: This command listens to kernel and udev events in real time, showing add, remove, and change events.","udevmonitor","udevmonitor: The legacy tool that also displays real-time udev events; it's deprecated but still available on some distributions.","udevadm info --export-db","udevadm info --export-db: Displays the current udev database of all known devices; does not monitor live events.","udevadm test","udevadm test: Simulates udev rule processing for a given device; it does not continuously monitor events.","evtest","evtest: Monitors input device event streams at the kernel level (e.g., keyboards, mice) but does not show udev rule processing or add/remove events.",,,,"1,2","To debug device detection at the udev level, you use tools that show live udev events. “udevadm monitor” is the current utility for this purpose, and “udevmonitor” is the older, deprecated version. Other udevadm subcommands or evtest do not provide a live stream of add/remove/change events.","Kernel runtime management and troubleshooting"
"Which efibootmgr options are used to create and delete UEFI boot entries?",multi-select,"-c, --create (create a new boot entry)","Correct: -c or --create is used to add a new UEFI boot entry by specifying disk, partition, loader path, and label.","-B, --delete-bootnum (delete a boot entry)","Correct: -B or --delete-bootnum removes an existing UEFI boot entry identified by its BootNum.","-n, --bootnext (set the next boot entry only)","-n or --bootnext only sets which entry to boot on the next reboot; it does not create or delete entries.","-v, --verbose (display detailed information)","-v or --verbose shows detailed information about existing boot entries; it does not modify them.",,,,,"1,2","efibootmgr is the standard utility to manage UEFI boot entries. To add a new entry, you use the -c/--create option along with parameters like --disk, --part, --loader, and --label. To remove an existing entry, you use the -B/--delete-bootnum option and specify the BootNum of the entry you wish to delete. Other options such as -n/--bootnext and -v/--verbose serve different purposes (setting the next boot or showing details) but do not create or delete entries.","202.2 System recovery (weight: 4)"
"Given a system with a single disk /dev/sda whose EFI System Partition is /dev/sda1, which efibootmgr command will delete the existing UEFI boot entry numbered 0002?",multiple-choice,"efibootmgr -b 0002 -B","Correct. The -b option selects BootNum 0002 and -B deletes that entry.","efibootmgr -v","Incorrect. -v only shows verbose boot entry information, it does not delete entries.","efibootmgr -n 0002","Incorrect. -n sets the one-time next boot entry, it does not delete entries.","efibootmgr --delete-entry 0002","Incorrect. --delete-entry is not a valid efibootmgr option; the delete flag is -B.",,,,,"1","efibootmgr’s -b <BootNum> selects a specific UEFI boot entry and -B removes it. Thus, “efibootmgr -b 0002 -B” deletes entry 0002 on the single ESP without needing extra device/partition flags.","202.2 System recovery"
"You need to change the percentage of reserved blocks on an ext4 filesystem mounted on /dev/sdb1 so that only 3% of the filesystem is reserved for the super-user. Which command accomplishes this?",multiple-choice,"tune2fs -i 3 /dev/sdb1","-i sets the maximal time interval between filesystem checks, not reserved blocks.","tune2fs -m 3 /dev/sdb1","-m sets the percentage of reserved blocks for the super-user.","tune2fs -r 3 /dev/sdb1","-r is not a valid option for setting reserved blocks percentage.","tune2fs -e 3 /dev/sdb1","-e configures the behaviour upon filesystem errors, not reserved blocks.",,,,,"2","On ext2/3/4 filesystems, tune2fs’s -m option adjusts the reserved-block percentage (default is 5%). Therefore, `tune2fs -m 3 /dev/sdb1` lowers the reserved space to 3%, allowing non-privileged users to use more of the filesystem.","203.2 Maintaining a Linux filesystem"
"Which of the following pieces of information is NOT shown in /proc/mdstat for a Linux software RAID array?",multiple-choice,"The RAID level (e.g., raid0, raid1, raid5)","/proc/mdstat reports the RAID level for each array.","The current state of each array (e.g., active, degraded)","/proc/mdstat shows whether an array is active, degraded, recovering, etc.","The percentage of resynchronization completed","During a rebuild or resync, /proc/mdstat displays the progress percentage.","The filesystem type on the RAID device","/proc/mdstat provides only RAID status information; filesystem type is not shown.",,,,,"4","The /proc/mdstat pseudo-file contains runtime status of software RAID devices such as their level, state, member devices and any ongoing resync/rebuild progress. It does not report filesystem-level details like the filesystem type on the array.","Topic 204.1 Configuring RAID"
"You have just attached a new disk /dev/sdc to your Linux system and want to incorporate it into an existing LVM volume group named vg_data so that you can use the extra space. Which two commands must you run? (Choose two.)",multi-select,"pvcreate /dev/sdc","Initializes /dev/sdc as a physical volume so that LVM can use it.","vgextend vg_data /dev/sdc","Adds the newly initialized physical volume /dev/sdc to the existing volume group vg_data.","lvextend -l +100%FREE /dev/vg_data/lv_data","Grows an existing logical volume to consume all free space in the volume group (not required to add the disk to the VG).","pvresize /dev/sdc","Adjusts the size of an existing physical volume after its underlying device has been expanded (not used for a brand-new disk).",,,,,"1,2","To add a new disk to an LVM setup you first run pvcreate to mark the disk as a physical volume. Then you use vgextend to add that PV into your existing volume group. lvextend is used later if you want to grow a logical volume, and pvresize applies only when an existing PV’s device has grown, not for a fresh disk.","Topic 204: Advanced Storage Device Administration"
"In the output of /proc/mdstat, which character indicates a missing or failed RAID member?",multiple-choice,"_","_ marks a missing or failed device in the array status.","U","U shows an active, up-to-date member in the array.",".",". denotes a device that is currently rebuilding or resyncing.","M","M is shown for a bitmap-enabled RAID5 device when metadata is being updated.",,,,,"1","In /proc/mdstat each RAID array line shows the state of its member disks using U for up-to-date and _ for missing. When a disk fails or is removed, its slot is replaced by an underscore (_), signaling a degraded array that needs attention.","Course module"
"Which command initializes a block device (for example, /dev/sdb1) as a Physical Volume for use by LVM?",multiple-choice,"pvcreate /dev/sdb1","pvcreate /dev/sdb1 marks the device as a physical volume for LVM.","vgcreate /dev/sdb1","vgcreate creates a volume group from existing physical volumes, but does not initialize them.","lvcreate /dev/sdb1","lvcreate creates a logical volume within an existing volume group.","mkfs.ext4 /dev/sdb1","mkfs.ext4 formats the device with an ext4 filesystem and is not related to LVM initialization.",,,,,"1","To prepare a raw block device for inclusion in LVM, you use pvcreate. This initializes the device’s metadata so it can be added to a volume group. vgcreate and lvcreate are later steps, and mkfs.ext4 merely creates a filesystem.","Topic 204: Advanced Storage Device Administration"
"You have created a blank file /swapfile intended to be used as swap space. Which commands must you run to prepare and activate it as swap?",multi-select,"chmod 600 /swapfile","chmod 600 /swapfile: Recommended to restrict access, but not strictly required to activate swap.","mkswap /swapfile","mkswap /swapfile: Initializes the file as a swap area (required).","swapon /swapfile","swapon /swapfile: Enables the prepared file as swap space (required).","blkid -t TYPE=swap /swapfile","blkid -t TYPE=swap /swapfile: blkid is used to query block devices and filesystems, not to prepare or activate swap files.",,,,,"2,3","After creating a file for swap, you must initialize it with mkswap to set up the swap signature and metadata, then enable it with swapon. While setting restrictive permissions with chmod is good practice, it's not mandatory to make the swap usable. The blkid tool is for identifying existing block devices or formatted partitions and is not part of the swap preparation workflow.","Topic 203: Filesystem and Devices"
"You want to leverage systemd’s automagic mount units for a filesystem defined in /etc/fstab at mount point “/opt/app/data”. Which of the following is the correct name of the systemd mount unit that systemd will generate?",multiple-choice,"/opt-app-data.mount","/opt-app-data.mount is not a valid unit name because systemd unit names never start with a slash.","opt-app-data.mount","opt-app-data.mount is correct: systemd converts “/opt/app/data” → “opt-app-data.mount”.","opt-app.mount","opt-app.mount would correspond to “/opt/app” mount point, not deep path.","data.mount","data.mount would correspond to “/data” mount point, not the nested path.",,,,,"2","When systemd creates mount units automatically from fstab or fstab-like entries, it takes the mount point path (“/opt/app/data”), strips the leading slash, and replaces remaining slashes with dashes. Thus “/opt/app/data” becomes the unit opt-app-data.mount.","Topic 203: Filesystem and Devices"
"Which of the following commands can be used to view detailed information about the ext4 filesystem features enabled on /dev/sdb1?",multi-select,"dumpe2fs /dev/sdb1","dumpe2fs prints the superblock and block group information, including the feature flags of an ext2/3/4 filesystem.","tune2fs -l /dev/sdb1","tune2fs -l lists the filesystem parameters and enabled feature flags for an ext2/3/4 filesystem.","debugfs -R features /dev/sdb1","debugfs is primarily for interactive ext2/3/4 debugging; it does not have a straightforward 'features' switch to list enabled features.","fsck.ext4 -i /dev/sdb1","fsck.ext4 -i is used to set the maximum interval between checks, not to display filesystem features.",,,,,"1,2","Both dumpe2fs and tune2fs can be used to inspect an ext4 filesystem's superblock and list the currently enabled feature flags. dumpe2fs provides detailed block group and superblock data, while tune2fs -l gives a concise list of filesystem parameters, including features. Neither debugfs nor fsck.ext4 -i are appropriate for simply listing feature flags.","203.2 Maintaining a Linux filesystem"
"You have mounted a Btrfs filesystem at /mnt/data and want to create a writable subvolume called 'backup'. Which command will accomplish this?",multiple-choice,"btrfs subvolume create /mnt/data/backup","Correct – ‘btrfs subvolume create’ followed by the target path creates a new writable subvolume named backup.","btrfs mkfs --name=backup /mnt/data","Wrong – ‘btrfs mkfs’ is used to create a new Btrfs filesystem, not a subvolume inside an existing filesystem.","mkfs.btrfs -n backup /dev/sdX1","Wrong – ‘mkfs.btrfs -n’ names the filesystem at format time; it does not create a subvolume inside an already mounted Btrfs.","btrfs snapshot /mnt/data /mnt/data/backup","Wrong – ‘btrfs snapshot’ takes a read-only snapshot by default (unless –r is omitted on older kernels) and is used to snapshot an existing subvolume, not create an empty one.",,,,,"1","On a mounted Btrfs filesystem, subvolumes are created with “btrfs subvolume create <path>”. This makes a new writable subvolume at the specified directory.","203.2 Maintaining a Linux filesystem"
"In the /etc/auto.master file, which fields are mandatory for each entry to correctly configure an AutoFS mount?",multi-select,"Local mount point","Specifies the directory where the filesystem will be automounted","Map file or map name","Defines the map (file or key) that contains the mount instructions","Filesystem type","Optional: you can embed filesystem type in an indirect map but it is not mandatory here","Server hostname","Not used in auto.master entries; hostnames are specified inside the map if needed",,,,,"1,2","Every line in /etc/auto.master must list the local directory to serve as the mount point and the map (file name or map name) that AutoFS will consult for the actual mount definitions. Fields such as filesystem type or server hostname are defined inside the map or via options, not in the auto.master entry itself.","203.3 Creating and configuring filesystem options"
"You need to create a writable snapshot of the Btrfs subvolume /mnt/btrfs/@home and then view all subvolumes on the filesystem mounted under /mnt/btrfs. Which commands accomplish these tasks?",multi-select,"btrfs subvolume snapshot /mnt/btrfs/@home /mnt/btrfs/@home_snapshot","Correct. 'btrfs subvolume snapshot' takes an existing subvolume and creates a writable snapshot at the specified location.","btrfs subvolume list /mnt/btrfs","Correct. 'btrfs subvolume list /mnt/btrfs' shows all subvolumes present on the Btrfs filesystem mounted at /mnt/btrfs.","btrfs snapshot create /mnt/btrfs/@home /mnt/btrfs/@home_snapshot","Incorrect. There is no 'btrfs snapshot create' subcommand; the proper syntax is 'btrfs subvolume snapshot'.","btrfs subvolume resize /mnt/btrfs/@home +1G","Incorrect. 'btrfs subvolume resize' changes the quota/reserved space of a subvolume and does not create snapshots or list subvolumes.",,,,,"1,2","To manage Btrfs subvolumes you use the 'btrfs subvolume' command set. 'btrfs subvolume snapshot SOURCE TARGET' creates a snapshot of SOURCE at TARGET, and 'btrfs subvolume list MOUNTPOINT' lists all subvolumes under that mount point. The other options either use invalid syntax or perform unrelated functions.","203.2 Maintaining a Linux filesystem"
"Which command is used to initialize and format a block device as a LUKS-encrypted volume?",multiple-choice,"cryptsetup format","Incorrect. There is no standalone “cryptsetup format” command for LUKS volumes.","cryptsetup luksFormat","Correct. The “cryptsetup luksFormat” command sets up a new LUKS container on a block device.","cryptsetup init","Incorrect. “cryptsetup init” is not a valid subcommand in cryptsetup.","cryptsetup dm-crypt","Incorrect. dm-crypt is the kernel subsystem used for encryption, not the user-space formatting tool.",,,,,"2","To create a new encrypted volume using LUKS, you use “cryptsetup luksFormat /dev/sdX”. This initializes the LUKS header and formats the device, preparing it for encrypted use.","203.3 Creating and configuring filesystem options"
"Which of the following commands can be used to display detailed superblock and block group descriptor information for an ext4 filesystem on /dev/sdb1?",multi-select,"tune2fs -l /dev/sdb1","tune2fs -l /dev/sdb1 lists filesystem parameters (including superblock details) without making modifications.","dumpe2fs /dev/sdb1","dumpe2fs /dev/sdb1 dumps superblock and block group details for an ext2/3/4 filesystem.","debugfs -R 'stats' /dev/sdb1","debugfs -R 'stats' /dev/sdb1 opens an ext2/3/4 filesystem in debug mode and shows superblock/statistics when invoked with the 'stats' command.","fsck.ext4 -n /dev/sdb1","fsck.ext4 -n /dev/sdb1 performs a read-only consistency check; it does not provide detailed superblock or block group descriptor information.",,,,,"1,2,3","To inspect superblock and block group descriptor information on ext4, you can use tune2fs -l (lists filesystem metadata), dumpe2fs (dumps superblock and group descriptor), or debugfs with the 'stats' command. fsck.ext4 -n only checks consistency without detailing filesystem metadata.","203.2 Maintaining a Linux filesystem"
"You have an existing ext3 filesystem on /dev/sdb1 and want to convert it in-place to Btrfs without losing data. Which command should you run?",multiple-choice,"btrfs-convert /dev/sdb1","Correct. btrfs-convert will convert an existing ext2/3/4 filesystem in-place to Btrfs, preserving data.","mkfs.btrfs /dev/sdb1","mkfs.btrfs will create a new Btrfs filesystem, destroying any existing data on the device.","btrfs device add /dev/sdb1 /mnt","btrfs device add is used to add a device to an existing Btrfs filesystem, not for conversion.","btrfs subvolume snapshot /dev/sdb1","btrfs subvolume snapshot creates a snapshot of a Btrfs subvolume; it does not perform filesystem conversion.",,,,,"1","The btrfs-convert utility performs an in-place conversion of an existing ext2/3/4 filesystem to Btrfs, keeping the original data intact and permitting rollback to the underlying filesystem if needed.","203.2 Maintaining a Linux filesystem"
"You have just added a new disk /dev/sdb to a Linux server and want to incorporate it into your existing LVM setup. Which command should you run first to prepare the disk for use as an LVM physical volume?",multiple-choice,"pvcreate /dev/sdb","pvcreate initializes a disk or partition for use as an LVM physical volume, making it the correct first step.","vgextend vg_data /dev/sdb","vgextend adds an existing physical volume to a volume group, but /dev/sdb must first be initialized with pvcreate.","lvextend -l +100%FREE /dev/vg_data/lv_data","lvextend grows a logical volume, but you can’t extend until the new disk has been added to a VG.","pvdisplay /dev/sdb","pvdisplay only shows information about a PV; it does not initialize it.",,,,,"1","Before you can add a new disk (/dev/sdb) to an LVM volume group, you must initialize it as a physical volume using pvcreate. Only after this step can you use vgextend to incorporate it into an existing VG and subsequently resize any LVs.","Topic 204: Advanced Storage Device Administration - LVM"
"You need to create a systemd mount unit to have the filesystem at /opt/data mounted automatically at boot. What is the correct name and location for this unit file?",multiple-choice,"/etc/systemd/system/opt-data.mount","Correct. The path /opt/data becomes opt-data.mount, and custom units belong in /etc/systemd/system.","/etc/systemd/system/data-opt.mount","Incorrect. The directory components must appear in the order they exist in the path (/opt/data → opt-data).","/usr/lib/systemd/system/opt-data.mount","Not recommended. /usr/lib/systemd/system is reserved for distribution-provided units; local overrides belong in /etc/systemd/system.","/etc/systemd/system/opt_data.mount","Incorrect. Systemd replaces path separators “/” with hyphens “-”, not underscores “_”.",,,,,"1","Systemd mount unit filenames mirror the absolute path to the mount point: each slash is replaced by a hyphen, and `.mount` is appended. Custom or administrator-supplied units are placed under /etc/systemd/system. Therefore, the correct file for /opt/data is /etc/systemd/system/opt-data.mount.","Topic 203: Filesystem and Devices"
"Which of the following commands provides a real-time overview of currently active software RAID devices and their states?",multiple-choice,"mdadm --create --scan","mdadm --create --scan is used to create arrays, not to display status.","cat /proc/mdstat","cat /proc/mdstat outputs the current status of all MD devices.","mdadm --assemble --scan","mdadm --assemble --scan assembles arrays, not used for status display.","lsblk","lsblk lists block devices, but does not specifically report RAID statuses.",,,,,"2","The /proc/mdstat file provides a live view of active software RAID devices; using cat /proc/mdstat will show array names, levels, devices involved, and their current states.","Topic 204: Advanced Storage Device Administration"
"You need to create a new software RAID 1 array called /dev/md/mirror1 using partitions /dev/sdb1 and /dev/sdc1. Which mdadm command will accomplish this in a single step?",multiple-choice,"mdadm --create --verbose /dev/md/mirror1 --level=1 --raid-devices=2 /dev/sdb1 /dev/sdc1","Correct. --create initializes a new array, --level=1 for RAID 1, --raid-devices=2 specifies two members, and --verbose shows detailed progress.","mdadm --build /dev/md/mirror1 -l1 -n2 /dev/sdb1 /dev/sdc1","--build is deprecated and only for expert use; it skips safety checks and is not recommended for standard array creation.","mdadm --assemble /dev/md/mirror1 /dev/sdb1 /dev/sdc1","--assemble attaches existing components to an already defined array; it does not create a new array.","mdadm --manage /dev/md/mirror1 --add /dev/sdb1 /dev/sdc1","--manage --add is used to add devices to an existing, already‐built array; it does not create one.",,,,,"1","To create a new RAID device from scratch you use mdadm --create. You must specify the target device (/dev/md/mirror1), the RAID level (1), and the number of devices (2), followed by the member partitions. Other subcommands like --assemble or --manage are for assembling or modifying existing arrays.","Advanced Storage Device Administration (Topic 204.1)"
"Which of the following /etc/fstab entries use a valid UUID-based identifier to mount the filesystem at boot?",multi-select,"UUID=3f8e1bbe-8c17-45b3-98ba-1234abcd5678   /data   ext4   defaults   0 2","Correct syntax: 'UUID=' prefix followed by the UUID is a valid way to identify a filesystem in /etc/fstab.","LABEL=mydisk                                /backup ext4   defaults,noatime 0 2","This entry uses a LABEL= identifier, not a UUID, so it does not qualify as a UUID-based fstab entry.","/dev/disk/by-uuid/3f8e1bbe-8c17-45b3-98ba-1234abcd5678 /data ext4 defaults 0 2","Using the /dev/disk/by-uuid/<UUID> path is also a valid method to reference a filesystem by its UUID.","UUID 3f8e1bbe-8c17-45b3-98ba-1234abcd5678   /data   ext4   defaults   0 2","Missing the '=' after 'UUID'; this is invalid syntax in /etc/fstab.",,,,,"1,3","In /etc/fstab you can identify filesystems by UUID in two common ways: using the 'UUID=<uuid>' keyword or by specifying the device path under /dev/disk/by-uuid/<uuid>. Both methods ensure that the correct filesystem is mounted even if the underlying device node name (e.g., /dev/sdb1) changes. Entries must include the '=' after 'UUID'; omitting it or using a different identifier (e.g., LABEL=) does not count as a valid UUID reference.","203.1 Operating the Linux filesystem"
"Which MBR partition type ID should you assign to a disk partition intended for Linux software RAID autodetection?",multiple-choice,"0xFD","0xFD is the correct partition type ID for Linux RAID autodetection. It tells the kernel and mdadm to treat the partition as part of a software RAID array.","0x83","0x83 designates a native Linux filesystem partition (e.g., ext2/3/4) and is not used for RAID.","0x8E","0x8E is used for Linux LVM physical volumes, not for RAID arrays.","0x82","0x82 marks a partition as Linux swap space.","0xBF","0xBF is the partition type code for Solaris and is unrelated to Linux RAID.",,,,"1","In an MBR partition table, the type ID 0xFD is reserved for Linux RAID autodetect. When mdadm scans for arrays at boot (or when assembling arrays manually), it looks for this type to automatically include the partition in any matching software RAID set. Using the correct ID ensures proper detection and assembly of RAID devices.","Topic 204: Advanced Storage Device Administration"
"Which single command will enable the network interface eth1 and assign it the IPv4 address 10.0.0.5/24?",multiple-choice,"ifconfig eth1 up 10.0.0.5 netmask 255.255.255.0","Incorrect. The 'up' keyword must follow the address and netmask parameters, not precede them.","ifconfig eth1 10.0.0.5 netmask 255.255.255.0 up","Correct. The proper syntax for ifconfig is: ifconfig <interface> <address> netmask <mask> up.","ip addr add 10.0.0.5/24 dev eth1 && ip link set eth1 up","Incorrect. This uses two separate commands joined by &&, not a single command.","ip link set eth1 up 10.0.0.5/24 dev eth1","Incorrect. The 'ip link set' command only changes link state and does not accept IP address assignment.",,,,,"2","Using ifconfig you can both assign an address/netmask and bring the interface up in one invocation. The correct syntax is 'ifconfig eth1 10.0.0.5 netmask 255.255.255.0 up'. The ip utility requires separate commands for address assignment (ip addr add ...) and link activation (ip link set ...).","Topic 205: Networking Configuration"
